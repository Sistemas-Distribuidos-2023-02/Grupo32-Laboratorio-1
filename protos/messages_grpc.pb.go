// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protos/messages.proto

package messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServersServiceClient is the client API for ServersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServersServiceClient interface {
	MandarLlaves(ctx context.Context, in *Llaves, opts ...grpc.CallOption) (*Confirmar, error)
	MandarNoAccedidos(ctx context.Context, in *Llaves, opts ...grpc.CallOption) (*Confirmar, error)
}

type serversServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServersServiceClient(cc grpc.ClientConnInterface) ServersServiceClient {
	return &serversServiceClient{cc}
}

func (c *serversServiceClient) MandarLlaves(ctx context.Context, in *Llaves, opts ...grpc.CallOption) (*Confirmar, error) {
	out := new(Confirmar)
	err := c.cc.Invoke(ctx, "/ServersService/MandarLlaves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serversServiceClient) MandarNoAccedidos(ctx context.Context, in *Llaves, opts ...grpc.CallOption) (*Confirmar, error) {
	out := new(Confirmar)
	err := c.cc.Invoke(ctx, "/ServersService/MandarNoAccedidos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServersServiceServer is the server API for ServersService service.
// All implementations must embed UnimplementedServersServiceServer
// for forward compatibility
type ServersServiceServer interface {
	MandarLlaves(context.Context, *Llaves) (*Confirmar, error)
	MandarNoAccedidos(context.Context, *Llaves) (*Confirmar, error)
	mustEmbedUnimplementedServersServiceServer()
}

// UnimplementedServersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServersServiceServer struct {
}

func (UnimplementedServersServiceServer) MandarLlaves(context.Context, *Llaves) (*Confirmar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MandarLlaves not implemented")
}
func (UnimplementedServersServiceServer) MandarNoAccedidos(context.Context, *Llaves) (*Confirmar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MandarNoAccedidos not implemented")
}
func (UnimplementedServersServiceServer) mustEmbedUnimplementedServersServiceServer() {}

// UnsafeServersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServersServiceServer will
// result in compilation errors.
type UnsafeServersServiceServer interface {
	mustEmbedUnimplementedServersServiceServer()
}

func RegisterServersServiceServer(s grpc.ServiceRegistrar, srv ServersServiceServer) {
	s.RegisterService(&ServersService_ServiceDesc, srv)
}

func _ServersService_MandarLlaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Llaves)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersServiceServer).MandarLlaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServersService/MandarLlaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersServiceServer).MandarLlaves(ctx, req.(*Llaves))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServersService_MandarNoAccedidos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Llaves)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersServiceServer).MandarNoAccedidos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServersService/MandarNoAccedidos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersServiceServer).MandarNoAccedidos(ctx, req.(*Llaves))
	}
	return interceptor(ctx, in, info, handler)
}

// ServersService_ServiceDesc is the grpc.ServiceDesc for ServersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServersService",
	HandlerType: (*ServersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MandarLlaves",
			Handler:    _ServersService_MandarLlaves_Handler,
		},
		{
			MethodName: "MandarNoAccedidos",
			Handler:    _ServersService_MandarNoAccedidos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/messages.proto",
}
